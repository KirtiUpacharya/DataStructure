public class SingleLL {
   private Listnode Head;
    public static class Listnode{

     private int data;
     private Listnode next;

     public  Listnode(int data)
    {
        this.data= data;
        this.next= null;
    } 
}
 
public void addpos(int data,int pos)
{ 
  Listnode newnode=new Listnode(data);
  Listnode Previous=Head;//curret till pos-1
  //Listnode Temp;
if(pos==1)
{
  newnode.next=Head;
  Head=newnode;
}
  
int count=1;
while(count < pos-1)
{
 Previous=Previous.next;
 count++;
}
//Listnode current=Previous.next;
 newnode.next=Previous.next;
 Previous.next=newnode;
}

public void Display(Listnode Head)
 {
 Listnode currentnode=Head;
 while(currentnode!=null)
 {
     System.out.print(currentnode.data + "->");
     currentnode=currentnode.next;  
}
 System.out.print("null");
 System.out.println();
}
public void addfirst(int data)
{
  Listnode firstnode= new Listnode(data);
  firstnode.next =Head;
  Head=firstnode;
}
public void addlast(int data)
{ Listnode currentnode=Head;
  Listnode NewNode=new Listnode(data);
  if(Head==null)
  Head=NewNode;
  while(currentnode.next!=null)
  {
    currentnode=currentnode.next;
  }
  currentnode.next=NewNode;
}

//find middle node using slow pointer and fast pointer. Asn-Middle node->slow pointer,while fastpointer check as null.

public Listnode findmiddlenode()
{
Listnode slowptr =Head;
Listnode fastptr =Head;
while(fastptr != null && fastptr.next != null)
{
slowptr=slowptr.next;
fastptr=fastptr.next.next;
}
return slowptr;
}
  public static void main(String[] args) {
    
    SingleLL LL=new SingleLL();

    LL.Head = new Listnode(10);
   
    Listnode second=new Listnode(90);
    LL.Head.next=second;

    //LL.Display();
    LL.addfirst(40);
    LL.addfirst(30);
    LL.addfirst(60);
    LL.Display(LL.Head);//#endregion();
    int count=LL.findlegnth(); 
    System.out.println("count is here ->" + count);
    LL.addlast(110);
    LL.addlast(95);
    LL.addpos(98, 6);
    LL.Display(LL.Head);
    Listnode middlenode= LL.findmiddlenode();
    System.out.println("Middle node ->" + middlenode.data);
  }
}






